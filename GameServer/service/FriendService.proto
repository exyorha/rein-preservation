syntax = "proto3";

option cc_generic_services = true;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "service/DataService.proto";
import "service/MissionService.proto";

/*
 * In the original code, it's 'apb.api.friend', but that results in
 * non-compilable generated code, because 'friend' is a C++ keyword and
 * it's used in the namespace name by protobuf. We change this to 'friends'
 * and fix the service name at the RPC dispatch level.
 */
package apb.api.friends;

option java_package = "jp.co.apb.server.api.proto.friend";
option java_multiple_files = true;
option csharp_namespace = "Art.Framework.ApiNetwork.Grpc.Api.Friend";

message GetUserRequest {
  int64 player_id = 1;
}

message GetUserResponse {
  .apb.api.friends.User user = 1;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message SearchRecommendedUsersResponse {
  repeated .apb.api.friends.User users = 1;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message User {
  int64 player_id = 1;
  string user_name = 2;
  .google.protobuf.Timestamp last_login_datetime = 3;
  int32 max_deck_power = 4;
  int32 favorite_costume_id = 5;
  int32 level = 6;
}

message FriendUser {
  int64 player_id = 1;
  string user_name = 2;
  .google.protobuf.Timestamp last_login_datetime = 3;
  int32 max_deck_power = 4;
  int32 favorite_costume_id = 5;
  int32 level = 6;
  bool cheer_received = 7;
  bool cheer_sent = 8;
  bool stamina_received = 9;
}

message SendFriendRequestRequest {
  int64 player_id = 1;
}

message SendFriendRequestResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message AcceptFriendRequestRequest {
  int64 player_id = 1;
}

message AcceptFriendRequestResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message DeclineFriendRequestRequest {
  int64 player_id_old = 1;
  repeated int64 player_id = 2;
}

message DeclineFriendRequestResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message DeleteFriendRequest {
  int64 player_id = 1;
}

message DeleteFriendResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message CheerFriendRequest {
  int64 player_id = 1;
}

message CheerFriendResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message BulkCheerFriendResponse {
  repeated int64 player_id = 1;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message ReceiveCheerRequest {
  int64 player_id = 1;
}

message ReceiveCheerResponse {
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message BulkReceiveCheerResponse {
  repeated int64 player_id = 1;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message GetFriendRequestListResponse {
  repeated .apb.api.friends.User user = 1;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

message GetFriendListRequest {
  .apb.api.mission.CageMeasurableValues cage_measurable_values = 50;
}

message GetFriendListResponse {
  repeated .apb.api.friends.FriendUser friend_user = 1;
  int32 send_cheer_count = 2;
  int32 received_cheer_count = 3;
  map<string, .apb.api.data.DiffData> diff_user_data = 99;
}

service FriendService {
  rpc GetUser(.apb.api.friends.GetUserRequest) returns (.apb.api.friends.GetUserResponse);
  rpc SearchRecommendedUsers(.google.protobuf.Empty) returns (.apb.api.friends.SearchRecommendedUsersResponse);
  rpc GetFriendList(.apb.api.friends.GetFriendListRequest) returns (.apb.api.friends.GetFriendListResponse);
  rpc GetFriendRequestList(.google.protobuf.Empty) returns (.apb.api.friends.GetFriendRequestListResponse);
  rpc SendFriendRequest(.apb.api.friends.SendFriendRequestRequest) returns (.apb.api.friends.SendFriendRequestResponse);
  rpc AcceptFriendRequest(.apb.api.friends.AcceptFriendRequestRequest) returns (.apb.api.friends.AcceptFriendRequestResponse);
  rpc DeclineFriendRequest(.apb.api.friends.DeclineFriendRequestRequest) returns (.apb.api.friends.DeclineFriendRequestResponse);
  rpc DeleteFriend(.apb.api.friends.DeleteFriendRequest) returns (.apb.api.friends.DeleteFriendResponse);
  rpc CheerFriend(.apb.api.friends.CheerFriendRequest) returns (.apb.api.friends.CheerFriendResponse);
  rpc BulkCheerFriend(.google.protobuf.Empty) returns (.apb.api.friends.BulkCheerFriendResponse);
  rpc ReceiveCheer(.apb.api.friends.ReceiveCheerRequest) returns (.apb.api.friends.ReceiveCheerResponse);
  rpc BulkReceiveCheer(.google.protobuf.Empty) returns (.apb.api.friends.BulkReceiveCheerResponse);
}

