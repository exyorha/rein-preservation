'Octo' is the system used for the asset retrieval.

There are several values used for its configuration, alternatively named by
latin letters and by more descriptive names.

'A' value is the integer 'app id', which seems to be hardcoded as 301,
'B' value is the 'client secret key', which seems to be hardcoded as
    the string 'l488k2zmalogay245osa257ifw2lczq4'
'C' value is the 'client AES key', which seems to be hardcoded as
    the string 'st4q3c7p1ibgwdhm'.
'D' value is the integer 'octo version', which seems to be hardcoded
    as 300116832.
'E' value is the base URL, which seems to be hardcoded as
    'https://resources-api.app.nierreincarnation.com/'.
'F' value is strictly derivative, and is calculated by formatting a string
    'dark_{0}_{1}' with 0 = A value, 1 = D value

Additionally, all of these parameters (except F) can be overriden by a
'settings/octo/octo_overwrite_config' resource, if it's present. In the
game as it currently this, this resource is present, but empty, and overrides
nothing.

In a 'review environment' all of these settings are unconditionally overriden
by a separate, review-only, configuration file downloaded from a server. This
is not yet researched.


The Octo list of assets is downloaded by a plain GET request (executed via
UnityWebRequest) from the following URL:

<octo E value>/v2/pub/a/<octo A value>/v/<octo D value>/list/<version>

Two additional headers need to be set on the request:
    - 'X-OCTO-KEY', with the value set to the 'B' value.
    - 'Accept: application/x-protobuf,x-octo-app/<octo A value>'.

The response will be served with the Content-Type of 'application/x-protobuf',
and contain a delta manifest between the version specified in the request
(or a full manifest, if the version is set as 0, as would be expected). ETag
is meaningful and should be used for caching.

The response is encrypted with AES-256-CBC, with PKCS#7 padding. The key
used for the encryption is obtained from sha256(octo F value, UTF-8 encoded).

The first 16 bytes of the response contain the initialization vector, the rest
is the encrypted data. After decryption, the obtained data should contain
protocol buffers-encoded manifest content.

The received protocol buffer is an Octo.Proto.Database.proto and is described in a
separate file.


The individual assets are received from an URL specified in the list of assets, in
the 'urlFormat' field. For illustration purposes only, currently that is:

"https://resources.app.nierreincarnation.com/unso-{v}-{type}/{o}?generation={g}&alt=media"

Following substitutions are made on the URL, based on the Octo.Proto.Data of
the file to be retrieved:

  'v'    - 'uploadVersionId' of the file,
  'type' - 'assetbundle', if the file comes from 'assetBundleList' in the
           database, or 'resources' if the file comes from 'resourceList',
  'o'    - 'objectName' of the file,
  'g'    - 'generation' of the file,

A plain GET request is made with no special headers. The User-Agent is that
of the Android Java VM, such as:

'User-Agent: Dalvik/2.1.0 (Linux; U; Android 14; sdk_gphone64_x86_64 Build/UE1A.230829.036.A1)'


Asset bundles are additionally masked as a weak protection measure. Note that
the MD5 of the asset bundle specified in the Octo database is that of the
masked asset - i.e., of the file as it's downloaded from the server.

The first byte of the bundle signals the type of masking done:
    - If it's 0x31, then the only the first 256 bytes of the bundle are masked,
    - If it's 0x32, then the whole bundle is masked.
Any other value is not valid, and the bundle should be rejected in such case.

First, the masking bytes need to be derived from the 'name' of the bundle
exactly as its specified in the Octo database by the following simple
algorithm presented in Ruby code:

    def generate_masking_bytes(string)
        mask_length = string.size * 2

        i = 0
        j = mask_length - 1

        mask_bytes = Array.new(mask_length)

        string.each_char do |ch|
            byte = ch.ord

            mask_bytes[i] = byte
            mask_bytes[j] = byte ^ 0xFF

            i += 2
            j -= 2
        end

        mask_of_mask = 0xBB
        mask_bytes.each do |byte|
            mask_of_mask = (((mask_of_mask & 1) << 7) | (mask_of_mask >> 1)) ^ byte
        end

        mask_bytes.map! do |byte|
            byte ^ mask_of_mask
        end

        mask_bytes
    end

Then, the masked portion of the file - either the entire file, or the first
256 bytes, depending on the masking type - needs to be XORed with the
calculated masked bytes. That includes the first, type, byte - the type byte
is not *inserted*, but overwrites the first byte of the bundle. The unmasked
portion, if any, should be copied as is.

After unmasking, the first byte of the bundle should be corrected by changing
it to the fixed value of 0x55 ('U'): asset bundles start with the signature of
'UnityFS'.
